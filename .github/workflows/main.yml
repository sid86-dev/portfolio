name: CI-Production
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_USER_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
  ANALYZE: ${{ secrets.ANALYZE }}
  NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_GA_MEASUREMENT_ID }}
  NEXT_PUBLIC_SERVICE_ID: ${{ secrets.NEXT_PUBLIC_SERVICE_ID }}
  NEXT_PUBLIC_ZOOM_PUBLISH_URL: ${{ secrets.NEXT_PUBLIC_ZOOM_PUBLISH_URL }}
  NEXT_PUBLIC_ZOOM_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_ZOOM_CLIENT_ID }}

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Caching Dependencies and Build Artifacts
  build:
    name: Build-Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Restoring and saving build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command

      - name: Build production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build # will run `yarn build` command

  # production deployment on vercel
  deploy:
    needs: build
    name: Deploy-production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Run cypress test on chrome
  ui-chrome-tests:
    needs: deploy
    runs-on: ubuntu-latest
    name: E2E on Chrome
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: chrome
          parallel: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ui-chrome-mobile-tests:
    needs: deploy
    runs-on: ubuntu-latest
    name: E2E on Chrome
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: chrome
          config: 'viewportWidth=375,viewportHeight=667'
          parallel: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Run cypress test on firefox
  ui-firefox-mobile-tests:
    needs: deploy
    runs-on: ubuntu-latest
    name: UI Tests - Firefox - Desktop
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: firefox
          config: 'viewportWidth=375,viewportHeight=667'
          parallel: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ui-firefox-tests:
    needs: deploy
    runs-on: ubuntu-latest
    name: UI Tests - Firefox - Desktop
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: firefox
          parallel: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # run lighthouse audit
  lighthouse-audit:
    runs-on: ubuntu-latest
    name: Lighthouse-audit
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://sid86.me
          budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage

  # merge main branch into prod after successfull deployment and test
  merge-branch:
    name: Merge-branch
    needs: [deploy, lighthouse-audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Merge into prod
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: main
          target_branch: prod
          message: Merge main into prod
          github_token: ${{ secrets.GITHUB_TOKEN }}
